@inject IUserRepository userRepository
@inject NavigationManager navigation

@page "/users/create"


<h3>Créer Utilisateur</h3>

@if (_message is not null)
{
    <h3 class="text-danger">@_message</h3>
}

<EditForm Model="Form" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <div>
        <label for="Username">Nom d'utilisateur :</label>
        <InputText id="Username" @bind-Value="Form.Username" class="form-control" />
        <ValidationMessage For="() => Form.Username" />
    </div>
    <div>
        <label for="Email">Email :</label>
        <InputText id="Email" @bind-Value="Form.Email" class="form-control" />
        <ValidationMessage For="() => Form.Email" />
    </div>
    <div>
        <label for="Password">Mot de passe :</label>
        <InputText id="Password" @bind-Value="Form.Password" class="form-control" type="password" />
        <ValidationMessage For="() => Form.Password" />
    </div>
    <div>
        <input type="submit" value="Créer" class="btn btn-primary mt-2" />
    </div>
</EditForm>

@code {
    private AddUserForm Form { get; } = new();
    private string? _message = null;

    public async Task OnValidSubmit()
    {
        Result result = await userRepository.ExecuteAsync(new AddUserCommand(Form.Username, Form.Email, Form.Password));

        if (result.IsSuccess)
            navigation.NavigateTo("/users");
        else
            _message = "Quelque chose s'est mal passé...";
    }
}